
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int N_MAX = 14;
	static int M_MAX = 14;
	static int n;
	static int m;
	static char[][] S;
	static int[][] dp = new int[N_MAX * M_MAX][(1 << (M_MAX))];
	static final int[][] price = { { 10, 8, 7, 5, 1 }, { 8, 6, 4, 3, 1 }, { 7, 4, 3, 2, 1 }, { 5, 3, 2, 2, 1 },
			{ 1, 1, 1, 1, 0 } };

	static int chgetPrice(char a, char b) {
		int x = 0;
		int y = 0;
		x = a - 'A';
		y = b - 'A';
		if (a == 'F')
			x = 4;
		if (b == 'F')
			y = 4;
		return price[x][y];
	}

	static int getPrice(int idx1, int idx2) {
		if (idx1 / m >= n || idx1 % m >= m || idx2 / m >= n || idx2 % m >= m)
			return 0;
		char a = S[idx1 / m][idx1 % m];
		char b = S[idx2 / m][idx2 % m];
		return chgetPrice(a, b);
	}

	static int go(int idx, int bit) {
		if (idx >= (n * m-1)) {
			return 0;
		}
		int ret = dp[idx][bit];
		if (ret != -1)
			return ret;

		ret = 0;

		if ((bit & (1 << 0)) != 0) {
			return dp[idx][bit]=  go(idx + 1, bit >> 1);//현재도 차있을 때
		} else { //현재가 비었을 때 1. 가로 2. 세로 3. 넘어가기
			if (idx % m < (m - 1) && (bit & (1 << 1)) == 0) {//가로
				ret =  go(idx + 2, bit >> 2) + getPrice(idx, idx + 1); 
			} else if ((idx / m) < (n - 1)) {//세로
				ret = Math.max(ret, getPrice(idx, idx + m) + go(idx + 1, (bit >> 1) | (1 << (m - 1))));
				}
			ret = Math.max(ret, go(idx + 1, bit >> 1));//넘어가버리기
			return dp[idx][bit] = ret;
		}
		
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		S = new char[n][m];
		for (int i = 0; i < n; i++) {
			String str= br.readLine();
			for(int j=0;j<m;j++) {
				S[i][j]=str.charAt(j);
			}
		}
			
		for (int i = 0; i < N_MAX * M_MAX; i++) {
			Arrays.fill(dp[i], -1);
		}
		System.out.println(go(0, 0));
	
	}

}
